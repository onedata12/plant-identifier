{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khjgd\\\\Desktop\\\\Maker\\\\plant\\\\plant-identifier\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [result, setResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n  useEffect(() => {\n    if (selectedImage) {\n      handleSubmit();\n    }\n  }, [selectedImage]);\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setSelectedImage(file);\n      setResult(null);\n    }\n  };\n  const handleSubmit = async e => {\n    if (e) e.preventDefault();\n    if (!selectedImage) {\n      alert('이미지를 선택해주세요');\n      return;\n    }\n    if (!API_KEY) {\n      alert('API 키가 설정되지 않았습니다');\n      return;\n    }\n    setIsLoading(true);\n    setResult('이미지 분석 중...');\n    try {\n      const reader = new FileReader();\n      reader.readAsDataURL(selectedImage);\n      reader.onloadend = async () => {\n        try {\n          const base64Image = reader.result.split(',')[1];\n          const cleanBase64 = btoa(atob(base64Image));\n          const requestBody = {\n            contents: [{\n              parts: [{\n                text: \"이 식물이나 꽃의 이름을 작은따옴표로 감싸서 한국어로 알려주세요. 예시) '동백꽃'\"\n              }, {\n                inlineData: {\n                  mimeType: \"image/jpeg\",\n                  data: cleanBase64\n                }\n              }]\n            }]\n          };\n          const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${API_KEY}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(requestBody)\n          });\n          if (!response.ok) {\n            const errorData = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, details: ${errorData}`);\n          }\n          const data = await response.json();\n          setResult(data.candidates[0].content.parts[0].text);\n        } catch (error) {\n          console.error('Error:', error);\n          setResult(`이미지 처리 중 오류가 발생했습니다: ${error.message}`);\n        }\n      };\n    } catch (error) {\n      console.error('Error:', error);\n      setResult('이미지 처리 중 오류가 발생했습니다.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Plant Identifier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageUpload,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? '분석 중...' : '분석하기'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC120\\uD0DD\\uB41C \\uC774\\uBBF8\\uC9C0:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(selectedImage),\n        alt: \"\\uC120\\uD0DD\\uB41C \\uC2DD\\uBB3C\",\n        style: {\n          maxWidth: '300px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uBD84\\uC11D \\uACB0\\uACFC:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J/xiU3RDdahjJQ+I6DT6UJVDyyE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","selectedImage","setSelectedImage","result","setResult","isLoading","setIsLoading","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","handleSubmit","handleImageUpload","event","file","target","files","e","preventDefault","alert","reader","FileReader","readAsDataURL","onloadend","base64Image","split","cleanBase64","btoa","atob","requestBody","contents","parts","text","inlineData","mimeType","data","response","fetch","method","headers","body","JSON","stringify","ok","errorData","Error","status","json","candidates","content","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","accept","onChange","disabled","src","URL","createObjectURL","alt","style","maxWidth","_c","$RefreshReg$"],"sources":["C:/Users/khjgd/Desktop/Maker/plant/plant-identifier/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [result, setResult] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\r\n\r\n  useEffect(() => {\r\n    if (selectedImage) {\r\n      handleSubmit();\r\n    }\r\n  }, [selectedImage]);\r\n\r\n  const handleImageUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      setSelectedImage(file);\r\n      setResult(null);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    if (e) e.preventDefault();\r\n    \r\n    if (!selectedImage) {\r\n      alert('이미지를 선택해주세요');\r\n      return;\r\n    }\r\n    \r\n    if (!API_KEY) {\r\n      alert('API 키가 설정되지 않았습니다');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setResult('이미지 분석 중...');\r\n\r\n    try {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(selectedImage);\r\n      \r\n      reader.onloadend = async () => {\r\n        try {\r\n          const base64Image = reader.result.split(',')[1];\r\n          const cleanBase64 = btoa(atob(base64Image));\r\n          \r\n          const requestBody = {\r\n            contents: [{\r\n              parts: [\r\n                {\r\n                  text: \"이 식물이나 꽃의 이름을 작은따옴표로 감싸서 한국어로 알려주세요. 예시) '동백꽃'\"\r\n                },\r\n                {\r\n                  inlineData: {\r\n                    mimeType: \"image/jpeg\",\r\n                    data: cleanBase64\r\n                  }\r\n                }\r\n              ]\r\n            }]\r\n          };\r\n\r\n          const response = await fetch(\r\n            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${API_KEY}`,\r\n            {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify(requestBody)\r\n            }\r\n          );\r\n\r\n          if (!response.ok) {\r\n            const errorData = await response.text();\r\n            throw new Error(`HTTP error! status: ${response.status}, details: ${errorData}`);\r\n          }\r\n\r\n          const data = await response.json();\r\n          setResult(data.candidates[0].content.parts[0].text);\r\n          \r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          setResult(`이미지 처리 중 오류가 발생했습니다: ${error.message}`);\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setResult('이미지 처리 중 오류가 발생했습니다.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Plant Identifier</h1>\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={handleImageUpload}\r\n          disabled={isLoading}\r\n        />\r\n        <button type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? '분석 중...' : '분석하기'}\r\n        </button>\r\n      </form>\r\n\r\n      {selectedImage && (\r\n        <div className=\"preview\">\r\n          <h3>선택된 이미지:</h3>\r\n          <img\r\n            src={URL.createObjectURL(selectedImage)}\r\n            alt=\"선택된 식물\"\r\n            style={{ maxWidth: '300px' }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {result && (\r\n        <div className=\"result\">\r\n          <h3>분석 결과:</h3>\r\n          <p>{result}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}