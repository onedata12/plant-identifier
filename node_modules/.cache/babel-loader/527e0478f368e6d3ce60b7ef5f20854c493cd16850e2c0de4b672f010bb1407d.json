{"ast":null,"code":"import React,{useState}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[selectedImage,setSelectedImage]=useState(null);const[result,setResult]=useState(null);const[isLoading,setIsLoading]=useState(false);const API_KEY=process.env.REACT_APP_GEMINI_API_KEY;// 이미지 선택 핸들러\nconst handleImageUpload=event=>{const file=event.target.files[0];setSelectedImage(file);};// 폼 제출 핸들러\nconst handleSubmit=async event=>{event.preventDefault();if(!selectedImage){alert('이미지를 선택해주세요');return;}if(!API_KEY){alert('API 키가 설정되지 않았습니다');return;}setIsLoading(true);setResult('이미지 분석 중...');try{// 이미지를 Base64로 변환\nconst reader=new FileReader();reader.readAsDataURL(selectedImage);reader.onloadend=async()=>{try{const base64Image=reader.result.split(',')[1];// base64 디코딩 후 다시 인코딩하여 이미지 데이터 정제\nconst cleanBase64=btoa(atob(base64Image));const requestBody={contents:[{parts:[{text:\"이 식물이나 꽃이 무엇인지 한국어로 설명해주세요.\"},{inlineData:{mimeType:\"image/jpeg\",data:cleanBase64}}]}]};// 디버깅을 위한 로그\nconsole.log('Original base64 length:',base64Image.length);console.log('Cleaned base64 length:',cleanBase64.length);// 요청 내용 확인\nconsole.log('Request details:',{url:`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent`,bodyLength:JSON.stringify(requestBody).length});const response=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${API_KEY}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});if(!response.ok){const errorData=await response.text();console.error('API Error Response:',errorData);throw new Error(`HTTP error! status: ${response.status}, details: ${errorData}`);}const data=await response.json();setResult(data.candidates[0].content.parts[0].text);}catch(error){console.error('Full error:',error);setResult(`이미지 처리 중 오류가 발생했습니다: ${error.message}`);}};}catch(error){console.error('Error:',error);setResult('이미지 처리 중 오류가 발생했습니다.');}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uC2DD\\uBB3C \\uC2DD\\uBCC4\\uAE30\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"image/*\",onChange:handleImageUpload,disabled:isLoading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:isLoading,children:isLoading?'분석 중...':'분석하기'})]}),selectedImage&&/*#__PURE__*/_jsxs(\"div\",{className:\"preview\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uC120\\uD0DD\\uB41C \\uC774\\uBBF8\\uC9C0:\"}),/*#__PURE__*/_jsx(\"img\",{src:URL.createObjectURL(selectedImage),alt:\"\\uC120\\uD0DD\\uB41C \\uC2DD\\uBB3C\",style:{maxWidth:'300px'}})]}),result&&/*#__PURE__*/_jsxs(\"div\",{className:\"result\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uBD84\\uC11D \\uACB0\\uACFC:\"}),/*#__PURE__*/_jsx(\"p\",{children:result})]})]});}export default App;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","App","selectedImage","setSelectedImage","result","setResult","isLoading","setIsLoading","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","handleImageUpload","event","file","target","files","handleSubmit","preventDefault","alert","reader","FileReader","readAsDataURL","onloadend","base64Image","split","cleanBase64","btoa","atob","requestBody","contents","parts","text","inlineData","mimeType","data","console","log","length","url","bodyLength","JSON","stringify","response","fetch","method","headers","body","ok","errorData","error","Error","status","json","candidates","content","message","className","children","onSubmit","type","accept","onChange","disabled","src","URL","createObjectURL","alt","style","maxWidth"],"sources":["C:/Users/khjgd/Desktop/Maker/plant/plant-identifier/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [result, setResult] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\r\n\r\n  // 이미지 선택 핸들러\r\n  const handleImageUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedImage(file);\r\n  };\r\n\r\n  // 폼 제출 핸들러\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    \r\n    if (!selectedImage) {\r\n      alert('이미지를 선택해주세요');\r\n      return;\r\n    }\r\n    \r\n    if (!API_KEY) {\r\n      alert('API 키가 설정되지 않았습니다');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setResult('이미지 분석 중...');\r\n\r\n    try {\r\n      // 이미지를 Base64로 변환\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(selectedImage);\r\n      \r\n      reader.onloadend = async () => {\r\n        try {\r\n          const base64Image = reader.result.split(',')[1];\r\n          \r\n          // base64 디코딩 후 다시 인코딩하여 이미지 데이터 정제\r\n          const cleanBase64 = btoa(atob(base64Image));\r\n          \r\n          const requestBody = {\r\n            contents: [{\r\n              parts: [\r\n                {\r\n                  text: \"이 식물이나 꽃이 무엇인지 한국어로 설명해주세요.\"\r\n                },\r\n                {\r\n                  inlineData: {\r\n                    mimeType: \"image/jpeg\",\r\n                    data: cleanBase64\r\n                  }\r\n                }\r\n              ]\r\n            }]\r\n          };\r\n\r\n          // 디버깅을 위한 로그\r\n          console.log('Original base64 length:', base64Image.length);\r\n          console.log('Cleaned base64 length:', cleanBase64.length);\r\n\r\n          // 요청 내용 확인\r\n          console.log('Request details:', {\r\n            url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent`,\r\n            bodyLength: JSON.stringify(requestBody).length\r\n          });\r\n\r\n          const response = await fetch(\r\n            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${API_KEY}`,\r\n            {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify(requestBody)\r\n            }\r\n          );\r\n\r\n          if (!response.ok) {\r\n            const errorData = await response.text();\r\n            console.error('API Error Response:', errorData);\r\n            throw new Error(`HTTP error! status: ${response.status}, details: ${errorData}`);\r\n          }\r\n\r\n          const data = await response.json();\r\n          setResult(data.candidates[0].content.parts[0].text);\r\n          \r\n        } catch (error) {\r\n          console.error('Full error:', error);\r\n          setResult(`이미지 처리 중 오류가 발생했습니다: ${error.message}`);\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setResult('이미지 처리 중 오류가 발생했습니다.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>식물 식별기</h1>\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={handleImageUpload}\r\n          disabled={isLoading}\r\n        />\r\n        <button type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? '분석 중...' : '분석하기'}\r\n        </button>\r\n      </form>\r\n\r\n      {selectedImage && (\r\n        <div className=\"preview\">\r\n          <h3>선택된 이미지:</h3>\r\n          <img\r\n            src={URL.createObjectURL(selectedImage)}\r\n            alt=\"선택된 식물\"\r\n            style={{ maxWidth: '300px' }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {result && (\r\n        <div className=\"result\">\r\n          <h3>분석 결과:</h3>\r\n          <p>{result}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}